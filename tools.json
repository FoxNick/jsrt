[
  {
    "type": "function",
    "function": {
      "name": "bash",
      "description": "Runs a bash command in an interactive bash session. When invoking this tool, the contents of the \"command\" parameter does NOT need to be XML-escaped. You don't have access to the internet via this tool. You can run Python, Node.js and Go code with the `python`, `node` and `go` commands. You can install Linux, Python, JavaScript and Go packages with the `apt`, `pip`, `npm` and `go` commands. Each sessionId identifies a persistent bash session. State is saved across command calls and discussions with the user. `timeout` parameter must be greater than the default timeout of 120 seconds and less than 600 seconds. Give long-running commands enough time to complete. If the command does not complete within \"timeout\" seconds, the tool will return a status indicating that it is still running asynchronously. You can then use `read_bash` or `stop_bash`.",
      "parameters": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "The bash command and arguments to run."
          },
          "description": {
            "type": "string",
            "description": "A short human-readable description of what the command does, limited to 100 characters, for example \"List files in the current directory\", \"Install dependencies with npm\" or \"Run RSpec tests\"."
          },
          "sessionId": {
            "type": "string",
            "description": "Indicates which bash session to run the command in. Multiple sessions may be used to run different commands at the same time."
          },
          "async": {
            "type": "boolean",
            "description": "If true, runs the command asynchronously. You can send input to the command using the `write_bash` tool and read its output using the `read_bash` tool."
          },
          "timeout": {
            "type": "integer",
            "description": "(Optional) Maximum time in seconds to wait for the command to complete when \"async\" is false. Default is 120 seconds if not provided."
          }
        },
        "required": ["command", "description", "sessionId", "async"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "write_bash",
      "description": "Sends input to the specified command or bash session. This tool can be used to send input to a running bash command or an interactive console app. Bash commands are run in an interactive bash session with a TTY device and bash command processor. sessionId (required) must match the sessionId used to invoke the async bash command. You can send text, {up}, {down}, {left}, {right}, {enter}, and {backspace} as input. Some applications present a list of options to select from. The selection is often denoted using â–·, >, or different formatting. When presented with a list of items, you must make a selection by sending arrow keys like {up} or {down} to move the selection to the item that you want to select and then {enter} to select it. The response will contain any output read after \"delay\" seconds. Delay should be appropriate for the task and never less than 10 seconds.",
      "parameters": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "Indicates which bash session to run the command in. Multiple sessions may be used to run different commands at the same time."
          },
          "input": {
            "type": "string",
            "description": "The input to send to the command or session."
          },
          "delay": {
            "type": "integer",
            "description": "(Optional) The amount of time in seconds to wait before reading the output that resulted from the input."
          }
        },
        "required": ["sessionId", "input"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "read_bash",
      "description": "Reads output from a bash command. Reads the output of a command running in an \"async\" bash session. The sessionId must be the same one used to invoke the bash command. You can call this tool multiple times to read output produced since the last call. Each request has a cost, so provide a reasonable \"delay\" parameter value for the task, to minimize the need for repeated reads that return no output. If a read request generates no output, consider using exponential backoff in choosing the delay between reads of the same command. Though `write_bash` accepts ANSI control codes, this tool does not include them in the output.",
      "parameters": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "The ID of the shell session used to invoke the bash command."
          },
          "delay": {
            "type": "integer",
            "description": "(Optional) The amount of time in seconds to wait before reading the output."
          }
        },
        "required": ["sessionId", "delay"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "stop_bash",
      "description": "Stops a running bash command. Stops a running bash command by terminating the entire bash session and process. This tool can be used to stop commands that have not exited on their own. Any environment variables defined will have to be redefined after using this tool if the same session ID is used to run a new command. The sessionId must match the sessionId used to invoke the bash command.",
      "parameters": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "The ID of the bash session used to invoke the bash command."
          }
        },
        "required": ["sessionId"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str_replace_editor",
      "description": "Editing tool for viewing, creating and editing files. State is persistent across command calls and discussions with the user. If `path` is a file, `view` displays the result of applying `cat -n`. If `path` is a directory, `view` lists non-hidden files and directories up to 2 levels deep. The `create` command cannot be used if the specified `path` already exists, or if parent directories don't exist. If a `command` generates a long output, output will be truncated and marked with `<file too long...`. Path *must* be absolute. The `old_str` parameter should match EXACTLY one or more consecutive lines from the original file. If the `old_str` parameter is not unique in the file, replacement will not be performed. Make sure to include enough context in `old_str` to make it unique. The `new_str` parameter should contain the edited lines that should replace the `old_str`.",
      "parameters": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "enum": ["view", "create", "str_replace", "insert"],
            "description": "The commands to run. Allowed options are: `create`, `view`, `str_replace`, `insert`."
          },
          "path": {
            "type": "string",
            "description": "Absolute path to file or directory."
          },
          "file_text": {
            "type": "string",
            "description": "Required parameter of `create` command; the content of the file to be created."
          },
          "old_str": {
            "type": "string",
            "description": "Required parameter of `str_replace` command containing the string in `path` to replace. Leading and ending whitespaces from file content should be preserved!"
          },
          "new_str": {
            "type": "string",
            "description": "Required parameter of `str_replace` command containing the new string. Required parameter of `insert` command containing the string to insert."
          },
          "insert_line": {
            "type": "integer",
            "description": "Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`."
          },
          "view_range": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file."
          }
        },
        "required": ["command", "path"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "report_progress",
      "description": "Report progress on the task. Call when you complete a meaningful unit of work. Commits and pushes changes that are pending in the repo, then updates the PR description. Use this tool at least once, and as early as possible once you've established a plan. Outline the complete plan as a checklist. Use only when you have meaningful progress to report (you need to update the plan in the checklist, you have code changes to commit, or you have completed a new item in the checklist). Use markdown checklists to show progress (- [x] for completed items, - [ ] for pending items). Keep the checklist structure as consistent as you can between updates, while still being accurate and useful. Don't use headers in the PR description, just the checklist. If there are changes in the repo this tool will run `git add .`, `git commit -m <msg>`, and `git push`.",
      "parameters": {
        "type": "object",
        "properties": {
          "commitMessage": {
            "type": "string",
            "description": "A short single line of text to use as the commit message"
          },
          "prDescription": {
            "type": "string",
            "description": "A description of work completed and remaining, using markdown checklists"
          }
        },
        "required": ["commitMessage", "prDescription"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "think",
      "description": "Use the tool to think about something. It will not obtain new information or make any changes to the repository, but just log the thought. Use it when complex reasoning or brainstorming is needed. For example, if you explore the repo and discover the source of a bug, call this tool to brainstorm several unique ways of fixing the bug, and assess which change(s) are likely to be simplest and most effective. Alternatively, if you receive some test results, call this tool to brainstorm ways to fix the failing tests.",
      "parameters": {
        "type": "object",
        "properties": {
          "thought": {
            "type": "string",
            "description": "Your thoughts."
          }
        },
        "required": ["thought"]
      }
    }
  }
,
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-download_workflow_run_artifact",
      "description": "Get download URL for a workflow run artifact",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "artifact_id": {
            "type": "number",
            "description": "The unique identifier of the artifact"
          }
        },
        "required": ["owner", "repo", "artifact_id"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_code_scanning_alert",
      "description": "Get details of a specific code scanning alert in a GitHub repository.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The owner of the repository."
          },
          "repo": {
            "type": "string",
            "description": "The name of the repository."
          },
          "alertNumber": {
            "type": "number",
            "description": "The number of the alert."
          }
        },
        "required": ["owner", "repo", "alertNumber"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_commit",
      "description": "Get details for a commit from a GitHub repository",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "sha": {
            "type": "string",
            "description": "Commit SHA, branch name, or tag name"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["owner", "repo", "sha"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_file_contents",
      "description": "Get the contents of a file or directory from a GitHub repository",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner (username or organization)"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "path": {
            "type": "string",
            "default": "/",
            "description": "Path to file/directory (directories must end with a slash '/')"
          },
          "ref": {
            "type": "string",
            "description": "Accepts optional git refs such as `refs/tags/{tag}`, `refs/heads/{branch}` or `refs/pull/{pr_number}/head`"
          },
          "sha": {
            "type": "string",
            "description": "Accepts optional commit SHA. If specified, it will be used instead of ref"
          }
        },
        "required": ["owner", "repo"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_issue",
      "description": "Get details of a specific issue in a GitHub repository.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The owner of the repository"
          },
          "repo": {
            "type": "string",
            "description": "The name of the repository"
          },
          "issue_number": {
            "type": "number",
            "description": "The number of the issue"
          }
        },
        "required": ["owner", "repo", "issue_number"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_issue_comments",
      "description": "Get comments for a specific issue in a GitHub repository.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "issue_number": {
            "type": "number",
            "description": "Issue number"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["owner", "repo", "issue_number"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_job_logs",
      "description": "Download logs for a specific workflow job or efficiently get all failed job logs for a workflow run",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "job_id": {
            "type": "number",
            "description": "The unique identifier of the workflow job (required for single job logs)"
          },
          "run_id": {
            "type": "number",
            "description": "Workflow run ID (required when using failed_only)"
          },
          "failed_only": {
            "type": "boolean",
            "description": "When true, gets logs for all failed jobs in run_id"
          },
          "return_content": {
            "type": "boolean",
            "description": "Returns actual log content instead of URLs"
          },
          "tail_lines": {
            "type": "number",
            "default": 500,
            "description": "Number of lines to return from the end of the log"
          }
        },
        "required": ["owner", "repo"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_latest_release",
      "description": "Get the latest release in a GitHub repository",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          }
        },
        "required": ["owner", "repo"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_pull_request",
      "description": "Get details of a specific pull request in a GitHub repository.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "pullNumber": {
            "type": "number",
            "description": "Pull request number"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_pull_request_comments",
      "description": "Get comments for a specific pull request.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "pullNumber": {
            "type": "number",
            "description": "Pull request number"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_pull_request_diff",
      "description": "Get the diff of a pull request.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "pullNumber": {
            "type": "number",
            "description": "Pull request number"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_pull_request_files",
      "description": "Get the files changed in a specific pull request.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "pullNumber": {
            "type": "number",
            "description": "Pull request number"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_pull_request_reviews",
      "description": "Get reviews for a specific pull request.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "pullNumber": {
            "type": "number",
            "description": "Pull request number"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_pull_request_status",
      "description": "Get the status of a specific pull request.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "pullNumber": {
            "type": "number",
            "description": "Pull request number"
          }
        },
        "required": ["owner", "repo", "pullNumber"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_release_by_tag",
      "description": "Get a specific release by its tag name in a GitHub repository",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "tag": {
            "type": "string",
            "description": "Tag name (e.g., 'v1.0.0')"
          }
        },
        "required": ["owner", "repo", "tag"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_secret_scanning_alert",
      "description": "Get details of a specific secret scanning alert in a GitHub repository.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The owner of the repository."
          },
          "repo": {
            "type": "string",
            "description": "The name of the repository."
          },
          "alertNumber": {
            "type": "number",
            "description": "The number of the alert."
          }
        },
        "required": ["owner", "repo", "alertNumber"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_tag",
      "description": "Get details about a specific git tag in a GitHub repository",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "tag": {
            "type": "string",
            "description": "Tag name"
          }
        },
        "required": ["owner", "repo", "tag"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_workflow_run",
      "description": "Get details of a specific workflow run",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "run_id": {
            "type": "number",
            "description": "The unique identifier of the workflow run"
          }
        },
        "required": ["owner", "repo", "run_id"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_workflow_run_logs",
      "description": "Download logs for a specific workflow run (EXPENSIVE: downloads ALL logs as ZIP. Consider using get_job_logs with failed_only=true for debugging failed jobs)",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "run_id": {
            "type": "number",
            "description": "The unique identifier of the workflow run"
          }
        },
        "required": ["owner", "repo", "run_id"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-get_workflow_run_usage",
      "description": "Get usage metrics for a workflow run",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "run_id": {
            "type": "number",
            "description": "The unique identifier of the workflow run"
          }
        },
        "required": ["owner", "repo", "run_id"]
      }
    }
  }
,
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_branches",
      "description": "List branches in a GitHub repository",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["owner", "repo"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_code_scanning_alerts",
      "description": "List code scanning alerts in a GitHub repository.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The owner of the repository."
          },
          "repo": {
            "type": "string",
            "description": "The name of the repository."
          },
          "state": {
            "type": "string",
            "enum": ["open", "closed", "dismissed", "fixed"],
            "default": "open",
            "description": "Filter code scanning alerts by state. Defaults to open"
          },
          "severity": {
            "type": "string",
            "enum": ["critical", "high", "medium", "low", "warning", "note", "error"],
            "description": "Filter code scanning alerts by severity"
          },
          "tool_name": {
            "type": "string",
            "description": "The name of the tool used for code scanning."
          },
          "ref": {
            "type": "string",
            "description": "The Git reference for the results you want to list."
          }
        },
        "required": ["owner", "repo"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_commits",
      "description": "Get list of commits of a branch in a GitHub repository. Returns at least 30 results per page by default, but can return more if specified using the perPage parameter (up to 100).",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "sha": {
            "type": "string",
            "description": "Commit SHA, branch or tag name to list commits of. If not provided, uses the default branch of the repository. If a commit SHA is provided, will list commits up to that SHA."
          },
          "author": {
            "type": "string",
            "description": "Author username or email address to filter commits by"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["owner", "repo"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_issue_types",
      "description": "List supported issue types for repository owner (organization).",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The organization owner of the repository"
          }
        },
        "required": ["owner"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_issues",
      "description": "List issues in a GitHub repository. For pagination, use the 'endCursor' from the previous response's 'pageInfo' in the 'after' parameter.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "state": {
            "type": "string",
            "enum": ["OPEN", "CLOSED"],
            "description": "Filter by state, by default both open and closed issues are returned when not provided"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter by labels"
          },
          "since": {
            "type": "string",
            "description": "Filter by date (ISO 8601 timestamp)"
          },
          "orderBy": {
            "type": "string",
            "enum": ["CREATED_AT", "UPDATED_AT", "COMMENTS"],
            "description": "Order issues by field. If provided, the 'direction' also needs to be provided."
          },
          "direction": {
            "type": "string",
            "enum": ["ASC", "DESC"],
            "description": "Order direction. If provided, the 'orderBy' also needs to be provided."
          },
          "after": {
            "type": "string",
            "description": "Cursor for pagination. Use the endCursor from the previous page's PageInfo for GraphQL APIs."
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["owner", "repo"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_pull_requests",
      "description": "List pull requests in a GitHub repository. If the user specifies an author, then DO NOT use this tool and use the search_pull_requests tool instead.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "state": {
            "type": "string",
            "enum": ["open", "closed", "all"],
            "description": "Filter by state"
          },
          "head": {
            "type": "string",
            "description": "Filter by head user/org and branch"
          },
          "base": {
            "type": "string",
            "description": "Filter by base branch"
          },
          "sort": {
            "type": "string",
            "enum": ["created", "updated", "popularity", "long-running"],
            "description": "Sort by"
          },
          "direction": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "Sort direction"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["owner", "repo"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_releases",
      "description": "List releases in a GitHub repository",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["owner", "repo"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_secret_scanning_alerts",
      "description": "List secret scanning alerts in a GitHub repository.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The owner of the repository."
          },
          "repo": {
            "type": "string",
            "description": "The name of the repository."
          },
          "state": {
            "type": "string",
            "enum": ["open", "resolved"],
            "description": "Filter by state"
          },
          "secret_type": {
            "type": "string",
            "description": "A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter."
          },
          "resolution": {
            "type": "string",
            "enum": ["false_positive", "wont_fix", "revoked", "pattern_edited", "pattern_deleted", "used_in_tests"],
            "description": "Filter by resolution"
          }
        },
        "required": ["owner", "repo"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_sub_issues",
      "description": "List sub-issues for a specific issue in a GitHub repository.",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "issue_number": {
            "type": "number",
            "description": "Issue number"
          },
          "page": {
            "type": "number",
            "description": "Page number for pagination (default: 1)"
          },
          "per_page": {
            "type": "number",
            "description": "Number of results per page (max 100, default: 30)"
          }
        },
        "required": ["owner", "repo", "issue_number"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_tags",
      "description": "List git tags in a GitHub repository",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["owner", "repo"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_workflow_jobs",
      "description": "List jobs for a specific workflow run",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "run_id": {
            "type": "number",
            "description": "The unique identifier of the workflow run"
          },
          "filter": {
            "type": "string",
            "enum": ["latest", "all"],
            "description": "Filters jobs by their completed_at timestamp"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["owner", "repo", "run_id"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_workflow_run_artifacts",
      "description": "List artifacts for a workflow run",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "run_id": {
            "type": "number",
            "description": "The unique identifier of the workflow run"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["owner", "repo", "run_id"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_workflow_runs",
      "description": "List workflow runs for a specific workflow",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "workflow_id": {
            "type": "string",
            "description": "The workflow ID or workflow file name"
          },
          "actor": {
            "type": "string",
            "description": "Returns someone's workflow runs. Use the login for the user who created the workflow run."
          },
          "branch": {
            "type": "string",
            "description": "Returns workflow runs associated with a branch. Use the name of the branch."
          },
          "event": {
            "type": "string",
            "enum": ["branch_protection_rule", "check_run", "check_suite", "create", "delete", "deployment", "deployment_status", "discussion", "discussion_comment", "fork", "gollum", "issue_comment", "issues", "label", "merge_group", "milestone", "page_build", "public", "pull_request", "pull_request_review", "pull_request_review_comment", "pull_request_target", "push", "registry_package", "release", "repository_dispatch", "schedule", "status", "watch", "workflow_call", "workflow_dispatch", "workflow_run"],
            "description": "Returns workflow runs for a specific event type"
          },
          "status": {
            "type": "string",
            "enum": ["queued", "in_progress", "completed", "requested", "waiting"],
            "description": "Returns workflow runs with the check run status"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["owner", "repo", "workflow_id"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-list_workflows",
      "description": "List workflows in a repository",
      "parameters": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "Repository owner"
          },
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["owner", "repo"]
      }
    }
  }
,
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-search_code",
      "description": "Fast and precise code search across ALL GitHub repositories using GitHub's native search engine. Best for finding exact symbols, functions, classes, or specific code patterns.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query using GitHub's powerful code search syntax. Examples: 'content:Skill language:Java org:github', 'NOT is:archived language:Python OR language:go', 'repo:github/github-mcp-server'. Supports exact matching, language filters, path filters, and more."
          },
          "sort": {
            "type": "string",
            "description": "Sort field ('indexed' only)"
          },
          "order": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "Sort order for results"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["query"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-search_issues",
      "description": "Search for issues in GitHub repositories using issues search syntax already scoped to is:issue",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query using GitHub issues search syntax"
          },
          "sort": {
            "type": "string",
            "enum": ["comments", "reactions", "reactions-+1", "reactions--1", "reactions-smile", "reactions-thinking_face", "reactions-heart", "reactions-tada", "interactions", "created", "updated"],
            "description": "Sort field by number of matches of categories, defaults to best match"
          },
          "order": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "Sort order"
          },
          "owner": {
            "type": "string",
            "description": "Optional repository owner. If provided with repo, only issues for this repository are listed."
          },
          "repo": {
            "type": "string",
            "description": "Optional repository name. If provided with owner, only issues for this repository are listed."
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["query"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-search_pull_requests",
      "description": "Search for pull requests in GitHub repositories using issues search syntax already scoped to is:pr",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query using GitHub pull request search syntax"
          },
          "sort": {
            "type": "string",
            "enum": ["comments", "reactions", "reactions-+1", "reactions--1", "reactions-smile", "reactions-thinking_face", "reactions-heart", "reactions-tada", "interactions", "created", "updated"],
            "description": "Sort field by number of matches of categories, defaults to best match"
          },
          "order": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "Sort order"
          },
          "owner": {
            "type": "string",
            "description": "Optional repository owner. If provided with repo, only pull requests for this repository are listed."
          },
          "repo": {
            "type": "string",
            "description": "Optional repository name. If provided with owner, only pull requests for this repository are listed."
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["query"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-search_repositories",
      "description": "Find GitHub repositories by name, description, readme, topics, or other metadata. Perfect for discovering projects, finding examples, or locating specific repositories across GitHub.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Repository search query. Examples: 'machine learning in:name stars:>1000 language:python', 'topic:react', 'user:facebook'. Supports advanced search syntax for precise filtering."
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["query"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "github-mcp-server-search_users",
      "description": "Find GitHub users by username, real name, or other profile information. Useful for locating developers, contributors, or team members.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "User search query. Examples: 'john smith', 'location:seattle', 'followers:>100'. Search is automatically scoped to type:user."
          },
          "sort": {
            "type": "string",
            "enum": ["followers", "repositories", "joined"],
            "description": "Sort users by number of followers or repositories, or when the person joined GitHub."
          },
          "order": {
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "Sort order"
          },
          "page": {
            "type": "number",
            "minimum": 1,
            "description": "Page number for pagination (min 1)"
          },
          "perPage": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Results per page for pagination (min 1, max 100)"
          }
        },
        "required": ["query"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_close",
      "description": "Close the page",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_resize",
      "description": "Resize the browser window",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "width": {
            "type": "number",
            "description": "Width of the browser window"
          },
          "height": {
            "type": "number",
            "description": "Height of the browser window"
          }
        },
        "required": ["width", "height"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_console_messages",
      "description": "Returns all console messages",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_handle_dialog",
      "description": "Handle a dialog",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "accept": {
            "type": "boolean",
            "description": "Whether to accept the dialog."
          },
          "promptText": {
            "type": "string",
            "description": "The text of the prompt in case of a prompt dialog."
          }
        },
        "required": ["accept"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_evaluate",
      "description": "Evaluate JavaScript expression on page or element",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "function": {
            "type": "string",
            "description": "() => { /* code */ } or (element) => { /* code */ } when element is provided"
          },
          "element": {
            "type": "string",
            "description": "Human-readable element description used to obtain permission to interact with the element"
          },
          "ref": {
            "type": "string",
            "description": "Exact target element reference from the page snapshot"
          }
        },
        "required": ["function"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_file_upload",
      "description": "Upload one or multiple files",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The absolute paths to the files to upload. Can be a single file or multiple files."
          }
        },
        "required": ["paths"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_install",
      "description": "Install the browser specified in the config. Call this if you get an error about the browser not being installed.",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_press_key",
      "description": "Press a key on the keyboard",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "description": "Name of the key to press or a character to generate, such as `ArrowLeft` or `a`"
          }
        },
        "required": ["key"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_type",
      "description": "Type text into editable element",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "element": {
            "type": "string",
            "description": "Human-readable element description used to obtain permission to interact with the element"
          },
          "ref": {
            "type": "string",
            "description": "Exact target element reference from the page snapshot"
          },
          "text": {
            "type": "string",
            "description": "Text to type into the element"
          },
          "slowly": {
            "type": "boolean",
            "description": "Whether to type one character at a time. Useful for triggering key handlers in the page. By default entire text is filled in at once."
          },
          "submit": {
            "type": "boolean",
            "description": "Whether to submit entered text (press Enter after)"
          }
        },
        "required": ["element", "ref", "text"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_navigate",
      "description": "Navigate to a URL",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL to navigate to"
          }
        },
        "required": ["url"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_navigate_back",
      "description": "Go back to the previous page",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_navigate_forward",
      "description": "Go forward to the next page",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_network_requests",
      "description": "Returns all network requests since loading the page",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_take_screenshot",
      "description": "Take a screenshot of the current page. You can't perform actions based on the screenshot, use browser_snapshot for actions.",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "filename": {
            "type": "string",
            "description": "File name to save the screenshot to. Defaults to `page-{timestamp}.{png|jpeg}` if not specified."
          },
          "fullPage": {
            "type": "boolean",
            "description": "When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Cannot be used with element screenshots."
          },
          "raw": {
            "type": "boolean",
            "description": "Whether to return without compression (in PNG format). Default is false, which returns a JPEG image."
          },
          "element": {
            "type": "string",
            "description": "Human-readable element description used to obtain permission to screenshot the element. If not provided, the screenshot will be taken of viewport. If element is provided, ref must be provided too."
          },
          "ref": {
            "type": "string",
            "description": "Exact target element reference from the page snapshot. If not provided, the screenshot will be taken of viewport. If ref is provided, element must be provided too."
          }
        }
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_snapshot",
      "description": "Capture accessibility snapshot of the current page, this is better than screenshot",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_click",
      "description": "Perform click on a web page",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "element": {
            "type": "string",
            "description": "Human-readable element description used to obtain permission to interact with the element"
          },
          "ref": {
            "type": "string",
            "description": "Exact target element reference from the page snapshot"
          },
          "button": {
            "type": "string",
            "enum": ["left", "right", "middle"],
            "description": "Button to click, defaults to left"
          },
          "doubleClick": {
            "type": "boolean",
            "description": "Whether to perform a double click instead of a single click"
          }
        },
        "required": ["element", "ref"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_drag",
      "description": "Perform drag and drop between two elements",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "startElement": {
            "type": "string",
            "description": "Human-readable source element description used to obtain the permission to interact with the element"
          },
          "startRef": {
            "type": "string",
            "description": "Exact source element reference from the page snapshot"
          },
          "endElement": {
            "type": "string",
            "description": "Human-readable target element description used to obtain the permission to interact with the element"
          },
          "endRef": {
            "type": "string",
            "description": "Exact target element reference from the page snapshot"
          }
        },
        "required": ["startElement", "startRef", "endElement", "endRef"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_hover",
      "description": "Hover over element on page",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "element": {
            "type": "string",
            "description": "Human-readable element description used to obtain permission to interact with the element"
          },
          "ref": {
            "type": "string",
            "description": "Exact target element reference from the page snapshot"
          }
        },
        "required": ["element", "ref"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_select_option",
      "description": "Select an option in a dropdown",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "element": {
            "type": "string",
            "description": "Human-readable element description used to obtain permission to interact with the element"
          },
          "ref": {
            "type": "string",
            "description": "Exact target element reference from the page snapshot"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of values to select in the dropdown. This can be a single value or multiple values."
          }
        },
        "required": ["element", "ref", "values"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_tab_list",
      "description": "List browser tabs",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_tab_new",
      "description": "Open a new tab",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL to navigate to in the new tab. If not provided, the new tab will be blank."
          }
        }
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_tab_select",
      "description": "Select a tab by index",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "index": {
            "type": "number",
            "description": "The index of the tab to select"
          }
        },
        "required": ["index"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_tab_close",
      "description": "Close a tab",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "index": {
            "type": "number",
            "description": "The index of the tab to close. Closes current tab if not provided."
          }
        }
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "playwright-browser_wait_for",
      "description": "Wait for text to appear or disappear or a specified time to pass",
      "parameters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "text": {
            "type": "string",
            "description": "The text to wait for"
          },
          "textGone": {
            "type": "string",
            "description": "The text to wait for to disappear"
          },
          "time": {
            "type": "number",
            "description": "The time to wait in seconds"
          }
        }
      }
    }
  }
]
